/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace IDegenDealsERC721 {
  export type DealDataStruct = {
    minter: AddressLike;
    obligor: AddressLike;
    offerHash: string;
    paymentToken: AddressLike;
    paymentAmount: BigNumberish;
    period: BigNumberish;
    dealAccount: AddressLike;
    deadline: BigNumberish;
    obligee: AddressLike;
    obligorDeal: boolean;
    obligeeDeal: boolean;
    arbitrator: AddressLike;
    status: BigNumberish;
  };

  export type DealDataStructOutput = [
    minter: string,
    obligor: string,
    offerHash: string,
    paymentToken: string,
    paymentAmount: bigint,
    period: bigint,
    dealAccount: string,
    deadline: bigint,
    obligee: string,
    obligorDeal: boolean,
    obligeeDeal: boolean,
    arbitrator: string,
    status: bigint
  ] & {
    minter: string;
    obligor: string;
    offerHash: string;
    paymentToken: string;
    paymentAmount: bigint;
    period: bigint;
    dealAccount: string;
    deadline: bigint;
    obligee: string;
    obligorDeal: boolean;
    obligeeDeal: boolean;
    arbitrator: string;
    status: bigint;
  };
}

export interface DegenDealsERC721Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "ARBITRATOR_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "DEGEN_BOSS_ROLE"
      | "MEMBER_ROLE"
      | "PERCENT_DENOMINATOR"
      | "_chargeAndDistributeMintFee"
      | "adjustShares"
      | "approve"
      | "arbitrage"
      | "balanceOf"
      | "becomeMember"
      | "calcFundAmount"
      | "calcMintFee"
      | "calcPayAmount"
      | "calcSplitFee"
      | "deal"
      | "dealDiscountPercent"
      | "dealURI"
      | "deals"
      | "dedeal"
      | "dedealRate"
      | "dedealsERC6551Registry"
      | "defaultURI"
      | "designate"
      | "fund"
      | "fundFeePercent"
      | "getApproved"
      | "getDeal"
      | "getDeals"
      | "getRoleAdmin"
      | "getRootDealId"
      | "grantMember"
      | "grantRole"
      | "hasRole"
      | "isApprovedForAll"
      | "isMember"
      | "isPaymentToken"
      | "kycWallet"
      | "legalFeeShare"
      | "legalWallet"
      | "mint"
      | "mintFeePercent"
      | "modifyPaymentToken"
      | "name"
      | "obligeeTransfer"
      | "obligorTransfer"
      | "ownerOf"
      | "parentDealId"
      | "pay"
      | "payFeePercent"
      | "platformFeeShare"
      | "platformWallet"
      | "quitFromMember"
      | "renounceRole"
      | "resolve"
      | "revokeRole"
      | "royaltyInfo"
      | "royaltyPercent"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setDealURI"
      | "setDefaultURI"
      | "setKYCWallet"
      | "setLegalWallet"
      | "setPlatformWallet"
      | "split"
      | "splitFeePercent"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "totalDeals"
      | "totalFeeShare"
      | "tranferObligee"
      | "tranferObligor"
      | "transferFeePercent"
      | "transferFrom"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "Arbitrage"
      | "BatchMetadataUpdate"
      | "Deal"
      | "Designate"
      | "Fund"
      | "Initialized"
      | "MetadataUpdate"
      | "Mint"
      | "Pay"
      | "Resolve"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Split"
      | "Transfer"
      | "TransferObligee"
      | "TransferObligor"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ARBITRATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEGEN_BOSS_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MEMBER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERCENT_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_chargeAndDistributeMintFee",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adjustShares",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "arbitrage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "becomeMember",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calcFundAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcMintFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcPayAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcSplitFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deal",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "dealDiscountPercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dealURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "deals", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "dedeal", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "dedealRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dedealsERC6551Registry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "designate",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fund",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fundFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeals",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRootDealId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantMember",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isMember",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isPaymentToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "kycWallet", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "legalFeeShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "legalWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [
      string,
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "modifyPaymentToken",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "obligeeTransfer",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "obligorTransfer",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "parentDealId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pay",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "payFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "platformFeeShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "platformWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quitFromMember",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "resolve",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyInfo",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setDealURI",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultURI",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setKYCWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLegalWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatformWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "split",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "splitFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDeals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalFeeShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tranferObligee",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tranferObligor",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "ARBITRATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEGEN_BOSS_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MEMBER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERCENT_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_chargeAndDistributeMintFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adjustShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "arbitrage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "becomeMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcFundAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcMintFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcPayAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcSplitFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dealDiscountPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dealURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dedeal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dedealRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dedealsERC6551Registry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "defaultURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "designate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDeal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getDeals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRootDealId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isMember", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPaymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kycWallet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "legalFeeShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "legalWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifyPaymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "obligeeTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "obligorTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "parentDealId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformFeeShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quitFromMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resolve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "royaltyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDealURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setKYCWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLegalWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "split", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "splitFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalDeals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalFeeShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tranferObligee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tranferObligor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ArbitrageEvent {
  export type InputTuple = [dealId: BigNumberish, subject: AddressLike];
  export type OutputTuple = [dealId: bigint, subject: string];
  export interface OutputObject {
    dealId: bigint;
    subject: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BatchMetadataUpdateEvent {
  export type InputTuple = [
    _fromTokenId: BigNumberish,
    _toTokenId: BigNumberish
  ];
  export type OutputTuple = [_fromTokenId: bigint, _toTokenId: bigint];
  export interface OutputObject {
    _fromTokenId: bigint;
    _toTokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DealEvent {
  export type InputTuple = [dealId: BigNumberish];
  export type OutputTuple = [dealId: bigint];
  export interface OutputObject {
    dealId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DesignateEvent {
  export type InputTuple = [
    dealId: BigNumberish,
    dealDiscountPercent: BigNumberish
  ];
  export type OutputTuple = [dealId: bigint, dealDiscountPercent: bigint];
  export interface OutputObject {
    dealId: bigint;
    dealDiscountPercent: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundEvent {
  export type InputTuple = [dealId: BigNumberish, newObligor: AddressLike];
  export type OutputTuple = [dealId: bigint, newObligor: string];
  export interface OutputObject {
    dealId: bigint;
    newObligor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MetadataUpdateEvent {
  export type InputTuple = [_tokenId: BigNumberish];
  export type OutputTuple = [_tokenId: bigint];
  export interface OutputObject {
    _tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintEvent {
  export type InputTuple = [
    dealId: BigNumberish,
    obligor: AddressLike,
    obligee: AddressLike,
    dealAccount: AddressLike,
    offerHash: string,
    paymentToken: AddressLike,
    paymentAmount: BigNumberish,
    period: BigNumberish
  ];
  export type OutputTuple = [
    dealId: bigint,
    obligor: string,
    obligee: string,
    dealAccount: string,
    offerHash: string,
    paymentToken: string,
    paymentAmount: bigint,
    period: bigint
  ];
  export interface OutputObject {
    dealId: bigint;
    obligor: string;
    obligee: string;
    dealAccount: string;
    offerHash: string;
    paymentToken: string;
    paymentAmount: bigint;
    period: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PayEvent {
  export type InputTuple = [
    dealId: BigNumberish,
    obligee: AddressLike,
    token: AddressLike,
    paymentAmount: BigNumberish
  ];
  export type OutputTuple = [
    dealId: bigint,
    obligee: string,
    token: string,
    paymentAmount: bigint
  ];
  export interface OutputObject {
    dealId: bigint;
    obligee: string;
    token: string;
    paymentAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResolveEvent {
  export type InputTuple = [dealId: BigNumberish];
  export type OutputTuple = [dealId: bigint];
  export interface OutputObject {
    dealId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SplitEvent {
  export type InputTuple = [dealId: BigNumberish];
  export type OutputTuple = [dealId: bigint];
  export interface OutputObject {
    dealId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferObligeeEvent {
  export type InputTuple = [
    dealId: BigNumberish,
    prevObligee: AddressLike,
    newObligor: AddressLike
  ];
  export type OutputTuple = [
    dealId: bigint,
    prevObligee: string,
    newObligor: string
  ];
  export interface OutputObject {
    dealId: bigint;
    prevObligee: string;
    newObligor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferObligorEvent {
  export type InputTuple = [
    dealId: BigNumberish,
    prevObligor: AddressLike,
    newObligor: AddressLike
  ];
  export type OutputTuple = [
    dealId: bigint,
    prevObligor: string,
    newObligor: string
  ];
  export interface OutputObject {
    dealId: bigint;
    prevObligor: string;
    newObligor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DegenDealsERC721 extends BaseContract {
  connect(runner?: ContractRunner | null): DegenDealsERC721;
  waitForDeployment(): Promise<this>;

  interface: DegenDealsERC721Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ARBITRATOR_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DEGEN_BOSS_ROLE: TypedContractMethod<[], [string], "view">;

  MEMBER_ROLE: TypedContractMethod<[], [string], "view">;

  PERCENT_DENOMINATOR: TypedContractMethod<[], [bigint], "view">;

  _chargeAndDistributeMintFee: TypedContractMethod<
    [paymentToken: AddressLike, paymentAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  adjustShares: TypedContractMethod<
    [_legalFeeShare: BigNumberish, _platformFeeShare: BigNumberish],
    [void],
    "nonpayable"
  >;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  arbitrage: TypedContractMethod<[dealId: BigNumberish], [void], "nonpayable">;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  becomeMember: TypedContractMethod<
    [signature: BytesLike],
    [void],
    "nonpayable"
  >;

  calcFundAmount: TypedContractMethod<
    [dealId: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        totalAmount: bigint;
        amountWithDiscount: bigint;
        fundFee: bigint;
      }
    ],
    "view"
  >;

  calcMintFee: TypedContractMethod<
    [paymentAmount: BigNumberish],
    [bigint],
    "view"
  >;

  calcPayAmount: TypedContractMethod<
    [dealId: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        totalAmount: bigint;
        payAmount: bigint;
        payFee: bigint;
      }
    ],
    "view"
  >;

  calcSplitFee: TypedContractMethod<
    [dealId: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        totalAmount: bigint;
        paymentAmount: bigint;
        splitFee: bigint;
      }
    ],
    "view"
  >;

  deal: TypedContractMethod<
    [dealId: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  dealDiscountPercent: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  dealURI: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  deals: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        string,
        bigint,
        string,
        boolean,
        boolean,
        string,
        bigint
      ] & {
        minter: string;
        obligor: string;
        offerHash: string;
        paymentToken: string;
        paymentAmount: bigint;
        period: bigint;
        dealAccount: string;
        deadline: bigint;
        obligee: string;
        obligorDeal: boolean;
        obligeeDeal: boolean;
        arbitrator: string;
        status: bigint;
      }
    ],
    "view"
  >;

  dedeal: TypedContractMethod<[], [string], "view">;

  dedealRate: TypedContractMethod<[], [bigint], "view">;

  dedealsERC6551Registry: TypedContractMethod<[], [string], "view">;

  defaultURI: TypedContractMethod<[], [string], "view">;

  designate: TypedContractMethod<
    [dealId: BigNumberish, dealDiscountPercent_: BigNumberish],
    [void],
    "nonpayable"
  >;

  fund: TypedContractMethod<
    [dealId: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  fundFeePercent: TypedContractMethod<[], [bigint], "view">;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getDeal: TypedContractMethod<
    [dealId: BigNumberish],
    [IDegenDealsERC721.DealDataStructOutput],
    "view"
  >;

  getDeals: TypedContractMethod<
    [dealIdFrom: BigNumberish, dealIdTo: BigNumberish],
    [IDegenDealsERC721.DealDataStructOutput[]],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getRootDealId: TypedContractMethod<[dealId: BigNumberish], [bigint], "view">;

  grantMember: TypedContractMethod<
    [member: AddressLike, signature: BytesLike],
    [void],
    "nonpayable"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  isMember: TypedContractMethod<[wallet: AddressLike], [boolean], "view">;

  isPaymentToken: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  kycWallet: TypedContractMethod<[], [string], "view">;

  legalFeeShare: TypedContractMethod<[], [bigint], "view">;

  legalWallet: TypedContractMethod<[], [string], "view">;

  mint: TypedContractMethod<
    [
      offerHash: string,
      paymentToken: AddressLike,
      paymentAmount: BigNumberish,
      period: BigNumberish,
      obligee: AddressLike,
      erc6551Account: AddressLike
    ],
    [[bigint, string] & { dealId: bigint; dealAccount: string }],
    "nonpayable"
  >;

  mintFeePercent: TypedContractMethod<[], [bigint], "view">;

  modifyPaymentToken: TypedContractMethod<
    [token: AddressLike, _isPaymentToken: boolean],
    [void],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  obligeeTransfer: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike, arg2: AddressLike],
    [boolean],
    "view"
  >;

  obligorTransfer: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike, arg2: AddressLike],
    [boolean],
    "view"
  >;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  parentDealId: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  pay: TypedContractMethod<
    [dealId: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  payFeePercent: TypedContractMethod<[], [bigint], "view">;

  platformFeeShare: TypedContractMethod<[], [bigint], "view">;

  platformWallet: TypedContractMethod<[], [string], "view">;

  quitFromMember: TypedContractMethod<[], [void], "nonpayable">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  resolve: TypedContractMethod<
    [dealId: BigNumberish, decision: BigNumberish],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  royaltyInfo: TypedContractMethod<
    [dealId: BigNumberish, salePrice: BigNumberish],
    [[string, bigint] & { receiver: string; royaltyAmount: bigint }],
    "view"
  >;

  royaltyPercent: TypedContractMethod<[], [bigint], "view">;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setDealURI: TypedContractMethod<
    [dealId: BigNumberish, dealURI_: string],
    [void],
    "nonpayable"
  >;

  setDefaultURI: TypedContractMethod<
    [_defaultURI: string],
    [void],
    "nonpayable"
  >;

  setKYCWallet: TypedContractMethod<
    [kycWallet_: AddressLike],
    [void],
    "nonpayable"
  >;

  setLegalWallet: TypedContractMethod<
    [legalWallet_: AddressLike],
    [void],
    "nonpayable"
  >;

  setPlatformWallet: TypedContractMethod<
    [platformWallet_: AddressLike],
    [void],
    "nonpayable"
  >;

  split: TypedContractMethod<
    [dealId: BigNumberish, paymentAmounts: BigNumberish[]],
    [[bigint, bigint] & { splitDealIdFrom: bigint; splitDealIdTo: bigint }],
    "nonpayable"
  >;

  splitFeePercent: TypedContractMethod<[], [bigint], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenURI: TypedContractMethod<[dealId: BigNumberish], [string], "view">;

  totalDeals: TypedContractMethod<[], [bigint], "view">;

  totalFeeShare: TypedContractMethod<[], [bigint], "view">;

  tranferObligee: TypedContractMethod<
    [dealId: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  tranferObligor: TypedContractMethod<
    [dealId: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  transferFeePercent: TypedContractMethod<[], [bigint], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, dealId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ARBITRATOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEGEN_BOSS_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MEMBER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PERCENT_DENOMINATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_chargeAndDistributeMintFee"
  ): TypedContractMethod<
    [paymentToken: AddressLike, paymentAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "adjustShares"
  ): TypedContractMethod<
    [_legalFeeShare: BigNumberish, _platformFeeShare: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "arbitrage"
  ): TypedContractMethod<[dealId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "becomeMember"
  ): TypedContractMethod<[signature: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "calcFundAmount"
  ): TypedContractMethod<
    [dealId: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        totalAmount: bigint;
        amountWithDiscount: bigint;
        fundFee: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "calcMintFee"
  ): TypedContractMethod<[paymentAmount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "calcPayAmount"
  ): TypedContractMethod<
    [dealId: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        totalAmount: bigint;
        payAmount: bigint;
        payFee: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "calcSplitFee"
  ): TypedContractMethod<
    [dealId: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        totalAmount: bigint;
        paymentAmount: bigint;
        splitFee: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "deal"
  ): TypedContractMethod<
    [dealId: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "dealDiscountPercent"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "dealURI"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "deals"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        string,
        bigint,
        string,
        boolean,
        boolean,
        string,
        bigint
      ] & {
        minter: string;
        obligor: string;
        offerHash: string;
        paymentToken: string;
        paymentAmount: bigint;
        period: bigint;
        dealAccount: string;
        deadline: bigint;
        obligee: string;
        obligorDeal: boolean;
        obligeeDeal: boolean;
        arbitrator: string;
        status: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "dedeal"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "dedealRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "dedealsERC6551Registry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "defaultURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "designate"
  ): TypedContractMethod<
    [dealId: BigNumberish, dealDiscountPercent_: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fund"
  ): TypedContractMethod<
    [dealId: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fundFeePercent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getDeal"
  ): TypedContractMethod<
    [dealId: BigNumberish],
    [IDegenDealsERC721.DealDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDeals"
  ): TypedContractMethod<
    [dealIdFrom: BigNumberish, dealIdTo: BigNumberish],
    [IDegenDealsERC721.DealDataStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getRootDealId"
  ): TypedContractMethod<[dealId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "grantMember"
  ): TypedContractMethod<
    [member: AddressLike, signature: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isMember"
  ): TypedContractMethod<[wallet: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isPaymentToken"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "kycWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "legalFeeShare"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "legalWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [
      offerHash: string,
      paymentToken: AddressLike,
      paymentAmount: BigNumberish,
      period: BigNumberish,
      obligee: AddressLike,
      erc6551Account: AddressLike
    ],
    [[bigint, string] & { dealId: bigint; dealAccount: string }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintFeePercent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "modifyPaymentToken"
  ): TypedContractMethod<
    [token: AddressLike, _isPaymentToken: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "obligeeTransfer"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike, arg2: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "obligorTransfer"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike, arg2: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "parentDealId"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "pay"
  ): TypedContractMethod<
    [dealId: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "payFeePercent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "platformFeeShare"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "platformWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "quitFromMember"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "resolve"
  ): TypedContractMethod<
    [dealId: BigNumberish, decision: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "royaltyInfo"
  ): TypedContractMethod<
    [dealId: BigNumberish, salePrice: BigNumberish],
    [[string, bigint] & { receiver: string; royaltyAmount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "royaltyPercent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDealURI"
  ): TypedContractMethod<
    [dealId: BigNumberish, dealURI_: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDefaultURI"
  ): TypedContractMethod<[_defaultURI: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setKYCWallet"
  ): TypedContractMethod<[kycWallet_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLegalWallet"
  ): TypedContractMethod<[legalWallet_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPlatformWallet"
  ): TypedContractMethod<[platformWallet_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "split"
  ): TypedContractMethod<
    [dealId: BigNumberish, paymentAmounts: BigNumberish[]],
    [[bigint, bigint] & { splitDealIdFrom: bigint; splitDealIdTo: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "splitFeePercent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[dealId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "totalDeals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalFeeShare"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tranferObligee"
  ): TypedContractMethod<
    [dealId: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tranferObligor"
  ): TypedContractMethod<
    [dealId: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFeePercent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, dealId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "Arbitrage"
  ): TypedContractEvent<
    ArbitrageEvent.InputTuple,
    ArbitrageEvent.OutputTuple,
    ArbitrageEvent.OutputObject
  >;
  getEvent(
    key: "BatchMetadataUpdate"
  ): TypedContractEvent<
    BatchMetadataUpdateEvent.InputTuple,
    BatchMetadataUpdateEvent.OutputTuple,
    BatchMetadataUpdateEvent.OutputObject
  >;
  getEvent(
    key: "Deal"
  ): TypedContractEvent<
    DealEvent.InputTuple,
    DealEvent.OutputTuple,
    DealEvent.OutputObject
  >;
  getEvent(
    key: "Designate"
  ): TypedContractEvent<
    DesignateEvent.InputTuple,
    DesignateEvent.OutputTuple,
    DesignateEvent.OutputObject
  >;
  getEvent(
    key: "Fund"
  ): TypedContractEvent<
    FundEvent.InputTuple,
    FundEvent.OutputTuple,
    FundEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "MetadataUpdate"
  ): TypedContractEvent<
    MetadataUpdateEvent.InputTuple,
    MetadataUpdateEvent.OutputTuple,
    MetadataUpdateEvent.OutputObject
  >;
  getEvent(
    key: "Mint"
  ): TypedContractEvent<
    MintEvent.InputTuple,
    MintEvent.OutputTuple,
    MintEvent.OutputObject
  >;
  getEvent(
    key: "Pay"
  ): TypedContractEvent<
    PayEvent.InputTuple,
    PayEvent.OutputTuple,
    PayEvent.OutputObject
  >;
  getEvent(
    key: "Resolve"
  ): TypedContractEvent<
    ResolveEvent.InputTuple,
    ResolveEvent.OutputTuple,
    ResolveEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Split"
  ): TypedContractEvent<
    SplitEvent.InputTuple,
    SplitEvent.OutputTuple,
    SplitEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "TransferObligee"
  ): TypedContractEvent<
    TransferObligeeEvent.InputTuple,
    TransferObligeeEvent.OutputTuple,
    TransferObligeeEvent.OutputObject
  >;
  getEvent(
    key: "TransferObligor"
  ): TypedContractEvent<
    TransferObligorEvent.InputTuple,
    TransferObligorEvent.OutputTuple,
    TransferObligorEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "Arbitrage(uint256,address)": TypedContractEvent<
      ArbitrageEvent.InputTuple,
      ArbitrageEvent.OutputTuple,
      ArbitrageEvent.OutputObject
    >;
    Arbitrage: TypedContractEvent<
      ArbitrageEvent.InputTuple,
      ArbitrageEvent.OutputTuple,
      ArbitrageEvent.OutputObject
    >;

    "BatchMetadataUpdate(uint256,uint256)": TypedContractEvent<
      BatchMetadataUpdateEvent.InputTuple,
      BatchMetadataUpdateEvent.OutputTuple,
      BatchMetadataUpdateEvent.OutputObject
    >;
    BatchMetadataUpdate: TypedContractEvent<
      BatchMetadataUpdateEvent.InputTuple,
      BatchMetadataUpdateEvent.OutputTuple,
      BatchMetadataUpdateEvent.OutputObject
    >;

    "Deal(uint256)": TypedContractEvent<
      DealEvent.InputTuple,
      DealEvent.OutputTuple,
      DealEvent.OutputObject
    >;
    Deal: TypedContractEvent<
      DealEvent.InputTuple,
      DealEvent.OutputTuple,
      DealEvent.OutputObject
    >;

    "Designate(uint256,uint256)": TypedContractEvent<
      DesignateEvent.InputTuple,
      DesignateEvent.OutputTuple,
      DesignateEvent.OutputObject
    >;
    Designate: TypedContractEvent<
      DesignateEvent.InputTuple,
      DesignateEvent.OutputTuple,
      DesignateEvent.OutputObject
    >;

    "Fund(uint256,address)": TypedContractEvent<
      FundEvent.InputTuple,
      FundEvent.OutputTuple,
      FundEvent.OutputObject
    >;
    Fund: TypedContractEvent<
      FundEvent.InputTuple,
      FundEvent.OutputTuple,
      FundEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "MetadataUpdate(uint256)": TypedContractEvent<
      MetadataUpdateEvent.InputTuple,
      MetadataUpdateEvent.OutputTuple,
      MetadataUpdateEvent.OutputObject
    >;
    MetadataUpdate: TypedContractEvent<
      MetadataUpdateEvent.InputTuple,
      MetadataUpdateEvent.OutputTuple,
      MetadataUpdateEvent.OutputObject
    >;

    "Mint(uint256,address,address,address,string,address,uint256,uint256)": TypedContractEvent<
      MintEvent.InputTuple,
      MintEvent.OutputTuple,
      MintEvent.OutputObject
    >;
    Mint: TypedContractEvent<
      MintEvent.InputTuple,
      MintEvent.OutputTuple,
      MintEvent.OutputObject
    >;

    "Pay(uint256,address,address,uint256)": TypedContractEvent<
      PayEvent.InputTuple,
      PayEvent.OutputTuple,
      PayEvent.OutputObject
    >;
    Pay: TypedContractEvent<
      PayEvent.InputTuple,
      PayEvent.OutputTuple,
      PayEvent.OutputObject
    >;

    "Resolve(uint256)": TypedContractEvent<
      ResolveEvent.InputTuple,
      ResolveEvent.OutputTuple,
      ResolveEvent.OutputObject
    >;
    Resolve: TypedContractEvent<
      ResolveEvent.InputTuple,
      ResolveEvent.OutputTuple,
      ResolveEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Split(uint256)": TypedContractEvent<
      SplitEvent.InputTuple,
      SplitEvent.OutputTuple,
      SplitEvent.OutputObject
    >;
    Split: TypedContractEvent<
      SplitEvent.InputTuple,
      SplitEvent.OutputTuple,
      SplitEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "TransferObligee(uint256,address,address)": TypedContractEvent<
      TransferObligeeEvent.InputTuple,
      TransferObligeeEvent.OutputTuple,
      TransferObligeeEvent.OutputObject
    >;
    TransferObligee: TypedContractEvent<
      TransferObligeeEvent.InputTuple,
      TransferObligeeEvent.OutputTuple,
      TransferObligeeEvent.OutputObject
    >;

    "TransferObligor(uint256,address,address)": TypedContractEvent<
      TransferObligorEvent.InputTuple,
      TransferObligorEvent.OutputTuple,
      TransferObligorEvent.OutputObject
    >;
    TransferObligor: TypedContractEvent<
      TransferObligorEvent.InputTuple,
      TransferObligorEvent.OutputTuple,
      TransferObligorEvent.OutputObject
    >;
  };
}
