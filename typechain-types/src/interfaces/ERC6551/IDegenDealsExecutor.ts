/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IDegenDealsExecutorInterface extends Interface {
  getFunction(
    nameOrSignature: "extcall" | "extcreate" | "extcreate2" | "extsload"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "extcall",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "extcreate",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "extcreate2",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "extsload", values: [BytesLike]): string;

  decodeFunctionResult(functionFragment: "extcall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "extcreate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "extcreate2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "extsload", data: BytesLike): Result;
}

export interface IDegenDealsExecutor extends BaseContract {
  connect(runner?: ContractRunner | null): IDegenDealsExecutor;
  waitForDeployment(): Promise<this>;

  interface: IDegenDealsExecutorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  extcall: TypedContractMethod<
    [to: AddressLike, value: BigNumberish, data: BytesLike],
    [string],
    "nonpayable"
  >;

  extcreate: TypedContractMethod<
    [value: BigNumberish, data: BytesLike],
    [string],
    "nonpayable"
  >;

  extcreate2: TypedContractMethod<
    [value: BigNumberish, salt: BytesLike, bytecode: BytesLike],
    [string],
    "nonpayable"
  >;

  extsload: TypedContractMethod<[slot: BytesLike], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "extcall"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish, data: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "extcreate"
  ): TypedContractMethod<
    [value: BigNumberish, data: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "extcreate2"
  ): TypedContractMethod<
    [value: BigNumberish, salt: BytesLike, bytecode: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "extsload"
  ): TypedContractMethod<[slot: BytesLike], [string], "view">;

  filters: {};
}
